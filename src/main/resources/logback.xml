<?xml version="1.0" encoding="UTF-8" ?>

<!--如果配置文件 logback-test.xml 和 logback.xml 都不存在，
那么 logback 默认地会调用BasicConfigurator ，创建一个最小化配置。
最小化配置由一个关联到根 logger 的ConsoleAppender组成。
输出用模式为%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
的PatternLayoutEncoder 进行格式化。rootlogger 默认级别是 DEBUG。-->
<!--1. 尝试在 classpath 下查找文件 logback-test.xml；
2. 如果文件不存在，则查找文件 logback.xml；
3. 如果两个文件都不存在，logback 用 BasicConfigurator
自动对自己进行配置，这会导致记录输出到控制台-->
<configuration>

    <!--设置输入地：控制台-->
    <appender name="consoleApp" class="ch.qos.logback.core.ConsoleAppender">
        <!--自定义格式-->
        <encoder>
            <pattern>
                %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n
            </pattern>
        </encoder>
    </appender>

    <!--设置输出地：日志文件-->
    <appender name="fileInfoApp" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--过滤器-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level><!-- 指定要对级别为ERROR日志信息过滤 -->
            <OnMismatch>ACCEPT</OnMismatch> <!-- 如果不匹配，则立即处理 -->
            <OnMatch>DENY</OnMatch> <!-- 如果匹配，则拒绝处理 -->
        </filter>

        <!--输出格式-->
        <encoder>
            <pattern>
                %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n
            </pattern>
        </encoder>
        <!-- 滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!--      &lt;!&ndash; 路径 一直不能输出到文件上，原来是不能使用相对路径, user.dir 如果使用tomcat部署，在tomcat的bin文件夹下&ndash;&gt;
            <fileNamePattern>${user.dir}/app_log/log/app.info.%d.log</fileNamePattern>
     -->
            <fileNamePattern>D:/program/IdeaProjects/dr-ssm/app_log/log/app.info.%d.log</fileNamePattern>
        </rollingPolicy>
    </appender>

    <appender name="fileErrorApp" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>
                %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n
            </pattern>
        </encoder>
        <!-- 设置滚动策略 -->
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 路径 --> <!--日志输出位置  可相对、和绝对路径 -->
            <!--
                        <fileNamePattern>${user.dir}/app_log/log/app.err.%d.log</fileNamePattern>
            -->
            <fileNamePattern>D:/program/IdeaProjects/dr-ssm//app_log/log/app.err.%d.log</fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6，
           则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除-->
            <MaxHistory>1</MaxHistory>

        </rollingPolicy>
    </appender>

    <!-- 只接受INFO及以上的日志信息 root 是所有logger的祖先，logger可设置additivity为false，不继承root-->
    <root level="INFO">
        <appender-ref ref="consoleApp"/>
        <appender-ref ref="fileInfoApp"/>
        <appender-ref ref="fileErrorApp"/>
    </root>

    <!--单独打印druid监控日志，我不知道哪一步出错了，
        appender写错了，未改
    -->
    <!--logger 根据name来匹配指定类的日志输出-->

    <appender name="druidError" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>
                %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n
            </pattern>
        </encoder>
        <!--如果使用按照固定窗口模式生成日志文件 要指定file-->
        <file>D:/program/IdeaProjects/dr-ssm/app_log/druid/druid_error.log</file>
        <!-- 设置滚动策略 -->
        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到10，当保存了10个归档文件后，将覆盖最早的日志。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <!-- 路径 -->
            <!--
                        <fileNamePattern>${user.dir}/app_log/druid/druid_error.log</fileNamePattern>
            -->、
            <!--指定文件压缩选项  .zip .gc 后缀 都是压缩格式-->
            <fileNamePattern>D:/program/IdeaProjects/dr-ssm/app_log/druid/druid_error.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动   -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>5MB</maxFileSize>
        </triggeringPolicy>
    </appender>

    <appender name="druidInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level><!-- 指定要对级别为ERROR日志信息过滤 -->
            <OnMismatch>ACCEPT</OnMismatch> <!-- 如果不匹配，则立即处理 -->
            <OnMatch>DENY</OnMatch> <!-- 如果匹配，则拒绝处理 -->
        </filter>
        <encoder>
            <pattern>
                %date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n
            </pattern>
        </encoder>
        <!--如果使用按照固定窗口模式生成日志文件 要指定file-->
        <file>D:/program/IdeaProjects/dr-ssm/app_log/druid/druid_info.log</file>
        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到10，当保存了10个归档文件后，将覆盖最早的日志。 -->
      <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
          <!-- 路径 -->
            <!--
                        <fileNamePattern>${user.dir}/app_log/druid/druid_info.log</fileNamePattern>
            -->
            <fileNamePattern>D:/program/IdeaProjects/dr-ssm/app_log/druid/druid_info.log</fileNamePattern>
          <minIndex>1</minIndex>
          <maxIndex>10</maxIndex>
        </rollingPolicy>
        <!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动   -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>5MB</maxFileSize>
        </triggeringPolicy>
    </appender>


    <logger  name="com.alibaba.druid.pool.DruidDataSourceStatLoggerImpl" level="INFO" additivity="false">
        <appender-ref ref="druidError"/>
        <appender-ref ref="druidInfo"/>
    </logger>

</configuration>